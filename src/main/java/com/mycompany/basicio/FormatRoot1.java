/*
https://docs.oracle.com/javase/tutorial/essential/io/formatting.html
*/

/*
Formatting
        
Stream objects that implement formatting are instances of either PrintWriter, 
a character stream class, or PrintStream, a byte stream class.

    Note: 
    The only PrintStream objects you are likely to need are System.out and 
    System.err. (See I/O from the Command Line for more on these objects.) 
    When you need to create a formatted output stream, instantiate PrintWriter, 
    not PrintStream.

Like all byte and character stream objects, instances of PrintStream and 
PrintWriter implement a standard set of write methods for simple byte and 
character output. In addition, both PrintStream and PrintWriter implement 
the same set of methods for converting internal data into formatted output. 
Two levels of formatting are provided:

    print and println - format individual values in a standard way.
    format - formats almost any number of values based on a format string, 
    with many options for precise formatting.

The print and println Methods

Invoking print or println outputs a single value after converting the value 
using the appropriate toString method. We can see this in the Root example:
*/
package com.mycompany.basicio;

public class FormatRoot1 {
    public static void main(String[] args) {
        int i = 2;
        double r = Math.sqrt(i);
        
        System.out.print("The square root of ");
        System.out.print(i);
        System.out.print(" is ");
        System.out.print(r);
        System.out.println(".");

        i = 5;
        r = Math.sqrt(i);
        System.out.println("The square root of " + i + " is " + r + ".");
    }
}
/*
Here is the output of Root:

    The square root of 2 is 1.4142135623730951.
    The square root of 5 is 2.23606797749979.

The i and r variables are formatted twice: the first time using code in an 
overload of print, the second time by conversion code automatically generated by 
the Java compiler, which also utilizes toString. You can format any value this way, 
but you don't have much control over the results.
*/